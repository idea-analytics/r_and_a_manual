[["index.html", "IDEA R&amp;A Manual Chapter 1 A little about this manual 1.1 What goes in this manual? 1.2 How do you contribute to this book?", " IDEA R&amp;A Manual Edison Coronado, Chris Haid, Rodrigo San Miguel 2021-05-14 Chapter 1 A little about this manual This manual is written in Markdown and managed with git/Github. Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. Use second (##) and third (###) level headings for sections in each chapter. 1.1 What goes in this manual? 1.2 How do you contribute to this book? "],["who.html", "Chapter 2 Who we are 2.1 About Research and Analysis 2.2 Edison Coronado 2.3 Rodrigo San Miguel 2.4 Chris Haid 2.5 Mishan Jensen, PhD 2.6 Steven Macapagal", " Chapter 2 Who we are 2.1 About Research and Analysis We are the research and analysis team at IDEA Public Schools. We are evaluators, statisticians, data scientists, and engineers, seeking above all to generate insight 2.2 Edison Coronado Edison supports IDEA by making sure our stakeholders have access to the highest quality information that is streamlined, efficient, and accurate. He works with all teams across IDEA to increase the accuracy of our information used to help guide all stakeholders in making the best possible decisions. Edison also works with different teams in identifying opportunities to improve the process we use to collect, share, and use information. 2.3 Rodrigo San Miguel Lorem ipsum dolor sit amet, in, et sed facilisi maximus suspendisse, facilisi in. Finibus in posuere risus, luctus, elit lacus in, rhoncus, ante mollis. In, eu in est curabitur. Sit ante lectus ante curabitur. Ac quis neque amet vel. Sed libero ut sed nisl non donec augue in molestie ut id sed aptent primis. Ligula dui tortor hac tempus cubilia, sapien morbi duis sed. Molestie ac faucibus ultrices. Scelerisque non ut sapien, proin sit odio duis ut aliquam suscipit in duis platea. Phasellus tellus volutpat sed vitae augue a. Ac sit, sociis eget vel sociis. Mus sit in sit erat, turpis, consequat. Mauris, ligula lobortis ac arcu, in magna, nibh pharetra phasellus nascetur. Ligula odio sapien ac eu laoreet rhoncus non netus. Tellus, sagittis dictum lacus vitae tristique. 2.4 Chris Haid Chris is the VP of Data Analytics 2.5 Mishan Jensen, PhD Dr. Mishan Jensen is an Evaluator on IDEA’s Academic Services team with 4 years of experience in program evaluation in a large urban school district and 2 years of experience as a Statistician for the Texas Department of Public Safety. She holds a master’s and doctoral degree from the University of Texas at Austin in educational psychology, with a specialization in quantitative methods. Previous work included evaluating multilingual education, teacher appraisal programs, and integration of arts into the classroom. During her time at UT, Mishan assisted with the development of the College of Education’s first fully web-based Introduction to Statistics course, as well as provided assistant teaching support for most of the graduate level statistics courses offered. 2.6 Steven Macapagal Steven Macapagal (aka Mac) is a statistician with R&amp;A and a former math teacher at IDEA Frontier and IDEA Bluff Springs. He loves Dr. Pepper, baseball, and watching Shark Tank "],["data-access.html", "Chapter 3 Data Access 3.1 The Data Warehouse", " Chapter 3 Data Access 3.1 The Data Warehouse The ‘data warehouse’ is actually a collection of disparate databases hosted by IDEA Public Schools. Some databases are used to host the original source data, some are used as the data model for production applications, while others site between those two points. While the IDEA has ~28 servers hosting SQL Server databases, R&amp;A typically only accesses 9 servers hosting 96 databases and 2,718 distinct tables. It’s a lot, for sure. 3.1.1 Core data warehouse server configuration The servers are not islands unto themselves, but rather form a small economy of data flows, where data moves from source servers, to production servers (i.e., the sweetspot for us) to reporting servers that host transformed data for our Logi-powered Locus dashboards. Figure 3.1: Data in the warehouse is initially stored in ‘src_` databases in ’DS’ servers and flows to the right towads Logi hosted Locus dashboards. Figure 3.1 shows the flows of data in the warehouse, which essentially move from left to right. TheDS-* servers host databases holding source data. That data is processed and saved in databases in the two production servers (PROD1 and PROD2). These two production servers host most the data that R&amp;A uses in analysis, but know where the source data comes from in is often helpful. Some data is (ostensibly) snapshotted and stored in the two *-HIS servers. To be sure, as of March 2020, R&amp;A doesn’t know much about these servers. The reporting servers—RS1, RS2, and RS-HIS, serve transformed flat files that serve as the data layer for Logi, which serves up Locus dashboards on the hub. The following sections provide some details on the what databases might be found on each server. 3.1.1.1 DS Servers NOTE: the DS servers have names that do not correspond the the servers’ URLS. Why this is the case is not clear, but this is something to pay attention to when work with data from these sources DS-PS is hosted on 887192-SQLDS and serves as a source for PROD1. Most the data hosted on DS-PS mirror PowerSchool’s Oracle back-end (espececially the Schools, ADA, and Enrollment databases), but it also has data from Teams Insights, staffing, college applications and outcomes, student persistence, among other things. Databases: ADA Attendance BlendedLearning CNP Colleges Enrollment Finance Insights: data from Microsoft Teams Persistence Schools: key data from PowerSchool Schools.DL Staffing Survey Sources: PowerSchool Other undefined sources Targets: Prod1 DS-III is hosted on 1044407-SQLDS2 and serves as a source for PROD2. (note that this is a bit confusing . . . which makes this writer think we may have this wrong; why would something called DS-III have server named DS2 that mostly provides source data to PROD2?) The data hosted on DS-III is almost exclusively source data from testing platforms like Illuminate DnA, AP, IB, ACT, and SAT. Databases: SRC_IA SRC_IB SRC_AP SRC_LEAP SRC_EA SRC_Dibles SRC_NWEA SRC_Plan SRC_SAT SRC_Telpas SRC_ACT SRC_Explorer Sources: See the database names just above PROD1 for lookup data about students and schools Targets: Prod2 DS-OT is hosted on 964592-SQLDS and serves as a source for PROD1. Databases focus on source data from variance external systems, including Naviance, Tyler Munis, Teachboost, Schoolmint, and a slew if individualized learning/blended learing platforms. Databases: SRC_Zendesk SRC_Naviance SRC_StMath SRC_DreamBox SRC_IHT SRC_TylerMunis SRC_TeachBoost SRC_StaffRetention SRC_SchoolMint SRC_Recruitment SRC_OpsCampusRanking SRC_JobVite SRC_HR SRC_GetRating SRC_ConnerStoneEvaluations SRC_BlendedLearning IdeaInstructionReporting Sources: See the database names just above PROD1 for lookup data about students and schools Targets: Prod1 3.1.1.2 PROD Servers PROD1 is hosted on 1065574-SQLPRD1 and contains a variety of data bases sourced from DS-PS and DS-OT. The key studetns, schools, and regions data is found here and is infact used by DS-III and DS-OT. Microsoft Insights data is now found here as well. This is the where transformed data is stored that is moved to RS2 (again, it is not clear why the server number doesn’t quite line up as we move from initial DS to PROD to RS). Databases: ADA Attendance BlendedLearning CNP Colleges Enrollment Finance Insights: data from Microsoft Teams Persistence Schools: key data from PowerSchool Schools.DL Staffing Survey Sources: DS-PS DS-OT Targets: RS2 ST-HIS FO1 PROD2 hosts all other data that is not on PROD, which is to say data initially stored in DS-III. This is the source server for RS1 and includes assessments (e.g., IAs, bi-weekly and unit assessments, AP, IB) data and accountability tables. Databases: Assessments Schools : this actually contains data \"inventories at the school level, like lists of employees, equipment and asset inventories, students schedules, correspondences between teachers and students. 3.1.1.3 RS and Hisotrical data Servers R&amp;A tends not to use these tables very often. RS1, RS2, and RS-HIS all have flat tables that utilized by by Logi for Locus Dashboards that are developed by Software Development. ST-HIS ostensibly has snapshots of data from the PROD servers, but that is just an unverified hunch ST-HIS Databases: unknown Sources: PROD1 PROD2 something called ST1 and ST2`? Targets RS-HIS RS1 Databases: unknown Sources: PROD2 something called ST2? Targets Logi RS2 Databases: unknown Sources: PROD1 something called ST1? Targets Logi RS-HIS Databases: unknown Sources: ST-HIS Targets Logi 3.1.2 Server, Table, and Field Lookup Table 3.2 provides details on servers, databases, tables, and fields. While it is not complete, it does cover the majority of our data infrastucture. Figure 3.2: Data warehouse details 3.1.2.1 IP Addresses of current servers For the fastest performance when working remotely it is best to directly access a database by using the IP address of the server rather than than the URL, which often has multiple hops over the network when resolving the DSN. Here’s a list of known IP Addresses and server names. List of Windows Servers hosting SQL Server Databases and their IP Addresses IP Adress Server Name 172.24.16.195 795184-LOGI 172.24.16.208 795198-CUSTAPPS 172.24.16.209 795199-CUSTAPSV 172.24.16.166 887192-SQLDS 172.24.16.193 795182-SQLCUSAP 172.24.16.125 795178-DISERVIC 172.24.16.207 795197-DIONLINE 172.24.16.198 964592-SQLDS 172.24.17.56 1123130-SDPDTMP 172.24.16.83 1064618-SQLDI 172.24.16.216 1054148-FINAPP 172.24.17.111 1064596-SQLRPT2 172.24.17.110 1064599-SQLRPTH 172.24.16.80 1064611-SRC4 172.24.16.206 795196-HQSTAGIN 172.24.16.196 795186-HQPROD01 172.24.16.197 795187-HQSQA01 172.24.16.201 795191-AUTOMATI 172.24.16.82 1064615-API1 172.24.16.110 1017144-SQLRPT 172.24.16.205 795195-HQSQLSA1 172.24.16.81 1064613-SQLPRD2 10.255.88.201 HQVSQLDS 172.24.17.160 1065574-SQLPRD1 172.24.16.210 1044407-SQLDS3 10.255.88.176 HQVSDBACKUPS 172.24.16.79 924794-AUXAUTO 10.255.88.152 SQLBI 3.1.3 Databases that R&amp;A frquently uses. : List of Windows Servers hosting SQLServer DBs and their IP Addresses "],["projects.html", "Chapter 4 Projects 4.1 Version control with Github 4.2 Project Process 4.3 Project lists", " Chapter 4 Projects Some significant applications are demonstrated in this chapter. 4.1 Version control with Github All analysis projects need to be saved via Git (on your local computer) and pushed to Github. Doing so has several benefits to both you, to your future self, and to your teammates: Since Git is a version control system, you get to save and track changes in your work (data, source code, reports, PowerPoint decks, Shiny dashboards) incrementally. Incremental saving means you can recover from any accidental plunders. It’s like Track Changes in Word, but for multiple files and folders. Spill a Diet Coke on your laptop in the middle of a big analysis? No big deal (if you’ve been pushing commits to Github, it’ll all be there!) Collaboration is much more structured, with powerful tools for asynchronous work and managing versions. Referencing and reviewing code, tracking issues, and sharing what you’ve done is seamless, which means … Your work will be reproducible: anyone from R&amp;A can pull your repo from Github, run your analyses, add to or edit what you’ve done, and share those changes back in a way that is communicative and documented. setting up web documentation for any R packages you build become seamless. But enough on the why let’s get to how (if you do want to know more on the why, check out this excellent article by Jenny Bryan) 4.1.1 Getting Started with Git, Github, and RStudio Here’s a quick overview of what you’ll need to do, with details to follow: Dedicate a directory (a.k.a “folder”) to it. Make it an RStudio Project. Make it a Git repository. Go about your usual business. But instead of only saving individual files, periodically you make a commit, which takes a multi-file snapshot of the entire project. Push commits to GitHub periodically. This is like sharing a document with colleagues on OneDrive or DropBox or sending it out as an email attachment. 4.1.1.1 First steps These steps are borrowed with some light editing from Happy git with R by Jenny Bryan. Register for GitHub account. Install or update R and RStudio Install Git Those on Windows will want to do these steps as well Introduce yourself to Git. Prove local Git can talk to GitHub. Cache your username and password so you don’t need to authenticate yourself to GitHub interactively ad nauseum. Create and save a GitHub Personal Access Token (PAT). Prove RStudio can find local Git and, therefore, can talk to GitHub. 4.1.2 Feature Branch Worklow There are many workflows using Git and remote repositories like Github. All of thenm boil down to the following steps: Pull or fetch or clone a repo on Github to your local machine. If you are starting a new project, then you’ll need to create a new repo on Github (but you can also start one on your machine). This is usually called the main (formerly master) branch. Create a new branch that you will work on. Do some analysis, coding, writing. Periodically save a snapshot of your entire project (all the files and folders, except those that you explicitly ignore). This is called *committing changes**. Every once ins while push your commits to the remote repo. Congrats! You’ve just backed up your remotely and made it easy to share. Merge your new analysis and code back into the main branch. This is usually initiated by something called a pull request (which is admittedly a little confusing). The specific workflow we use on IDEA’s R&amp;A team is the Feature Branch workflow, which has the benefit of being both simple, while minimizing merge conflicts. The core idea behind the Feature Branch Workflow is that all feature development should take place in a dedicated branch instead of the main branch. This encapsulation makes it easy for multiple analysts to work on a particular analysis without disturbing the main codebase. It also means the main branch will never contain broken code. Moreover, it means you’ll be more likely to get a second or third set of eyes on our analysis. This makes your work more transparent, helps enforce coding standards, and helps spread all the cool new techniques you’ve implemented in your analysis. So what does this look like? Well, here’s a picture of the feature branch workflow in use for this manual: This picture shows the development of this manual over time (from left to right) as rendered by Github’s network diagram: it includes new branches being created, commits being made and merges back into the main branch. The black line is the main branch and includes the most up-to-date, “official” version of this book. The green and blue lines are feature branches, which diverge from the main when you checkout a new branch. The dots represent commits. Colored lines returning to the main branch indicate a merge: the new code is now part of of the main branch. You might be wondering what the unmerged yellow line labeld gh-page represents. That is a special branch that is used by Githbub Actions that uses the concept of continuous integration/continuous to build the website that hosts this manual. You don’t need to worry about that one; it’s simply used to build out the site magically. 4.1.3 Example worflow with this manual, or getting your feet wet This section is going to walk you through how to use git/github by updating this manual. You’ll (i) clone the Github repo locally on your laptop, (ii) create a feature branch, (iii) make some changes to this documentation, save those changes, and then commit those changes git (i.e., locally take a snapshot), (iv) push those changes (including all of your commits) up to the Github repo, (v) initiate a pull request (i.e., ask to merge your branch into the main branch), and finally (vi) merge your changes into the master branch. But first things first: Verify you did the initial set-up steps above Get your bio ready **Note that throughout the steps below I’ll show you how to each step Ok. Your ready? Great! Here we go. 4.1.3.1 Get the R_and_A_Manual repository URL Go to R_and_A_Manual repo in your browser. On the main page for the repo click the green Code button, Click on HTTPS (the default), and click the clipboard to copy the repo’s URL: 4.1.3.2 Clone the repo Now you’ll pull the remote repo from Github onto you computer. You’ll want to think about where you want to save this. For example I save data analysis projects in seperate folders under a Data_Analysis/ folder. I save the manual just on my one drive. 4.1.3.2.1 Comand line Here I’m saving this to temporary space, by navigating to ~/tmp/~ and then cloning the data: cd ~/tmp/ git clone https://github.com/idea-analytics/r_and_a_manual.git This will pull down all the content of the repo: files, folders, all commits, all branches. Really the whole kit and kaboodle. 4.1.3.2.2 RStudio Here’s how you do it from RStudio: In RStudio, start a new Project: File &gt; New Project &gt; Version Control &gt; Git, or click on project icon in the upper right-hand corner of the IDE and select New Project…. In the “repository URL” paste the URL of your new GitHub repository. That is: https://github.com/idea-analytics/r_and_a_manual.git Be intentional about where you create this project. You should click “Open in new session”. Click Create Project to create a new directory, which will be all of these things: a directory or “folder” on your computer a Git repository, linked to the remote GitHub repository an RStudio Project Cool. You should now have the R&amp;A Manual files on repo history on your computer! 4.1.3.3 Checkout a branch Before you start doing anything you should check out a branch. A branch is like your own, tempory, disposable workspace. When you checkout a branch you create a new copy of the the repo and changes you make only happen on the branch. When your happy with the changes and are ready to share them you’ll to a pull request. But we’ll get to that below. 4.1.3.3.1 Command line It’s pretty straightforward. You create the branch, by giving a short but meaningful name, and then check it out. git branch update-bio-cjh git checkout update-bio-cjh Or you can do both of those moves in one line by using git checkout with the -b flag: git checkout -b update-bio-cjh 4.1.3.3.2 RStudio Click on the Git panel (usually in the upper right on that standard RStudio layout, but YMMV if you’ve customized your layouts). Click on the purple “branch” icon (it kinda looks like a piece of a flowchart). Giving a short but meaningful name (something like, update-bio-cjh). Make sure the Sync branch with remote checkbox is selected; this will save you a step later when you push you changes up to the repo. 4.1.3.4 Making changes and saving them You now on a new branch and go go makes some changes. Go ahead and open 02-Who_We_Are.Rmd file and add your name as a section, update your bio and save it, as you usually would Now you’ll want to commit those changes, which takes a snapshot of the current state on the branch you are working on. 4.1.3.5 Command line after saving you’ll run the git commit command with the -a (adds all changes) and -m (add commit message) flag with a short description of what you did. git commit -a -m &quot;Updated Chris&#39;s bio&quot; You should do this often. After a while you’ll want to push your changes up to Github (frequently, but not as often as commits): git push You’ve likely not yet defined where this remote branch should go, but git will give you a helpful error which gives you the command for syncing your local branch with a new remote branch.: fatal: The current branch update-bio-cjh has no upstream branch. To push the current branch and set the remote as upstream, use git push --set-upstream origin update-bio-cjh Go ahead and copy and run that command. git push --set-upstream origin update-bio-cjh After that you can just use git push and you’ll branch changes will be saved remotely. 4.1.3.6 RStudio In your git panel you see changed (or new) files show up. You’ll want to select the checkbox for any file that’s been modifed (inicated by an M) or that needs to be added (indicated by an A). Doing so readies the file to be updated in the commit: Click the commit button and new diaglogeu box will open, which will show any changes you’ve made in an y file. Select the checkbos for staged, if isn’t already selected, add a commit message and click Commit When your ready to save those to the repo, simply press the Push button. 4.1.3.7 Merging changes. Merging changes in your feature branch with the main branch requires you go to Github and to a pull request. A pull request is essential asking the main branch to “pull” in your changes and is technically known as a merge.. So here are the steps. Go to the repo (https://github.com/idea-analytics/r_and_a_manual). You may see an info box suggesting you can merge your branch. If so, click on the Compare &amp; pull request button. If not select your branch and click the Pull Request icon. If you are able to merge (you’ll know) click the Create pull request button. Ask someone to review you request (ideally) Click the Merge pull request button and confimr the merge. If you are done with our feature branch feel free to delete it. You done! You’ll want to be careful here if you are working with others. If you pulled your main branch donw a while ago there is a risk that the main branch on your laptop is not up-to-date with the main branch on Github (because others have merged changes there). The best remedy is to checkout and pull main—which gets up to date—and then checkout your branch and run git merge main. You may have to resolve conflicts. 4.2 Project Process Lorem ipsum dolor sit amet, in, et sed facilisi maximus suspendisse, facilisi in. Finibus in posuere risus, luctus, elit lacus in, rhoncus, ante mollis. In, eu in est curabitur. Sit ante lectus ante curabitur. Ac quis neque amet vel. Sed libero ut sed nisl non donec augue in molestie ut id sed aptent primis. Ligula dui tortor hac tempus cubilia, sapien morbi duis sed. Molestie ac faucibus ultrices. Scelerisque non ut sapien, proin sit odio duis ut aliquam suscipit in duis platea. Phasellus tellus volutpat sed vitae augue a. Ac sit, sociis eget vel sociis. Mus sit in sit erat, turpis, consequat. Mauris, ligula lobortis ac arcu, in magna, nibh pharetra phasellus nascetur. Ligula odio sapien ac eu laoreet rhoncus non netus. Tellus, sagittis dictum lacus vitae tristique. 4.2.1 Onboarding via Wrike Lorem ipsum dolor sit amet, in, et sed facilisi maximus suspendisse, facilisi in. Finibus in posuere risus, luctus, elit lacus in, rhoncus, ante mollis. In, eu in est curabitur. Sit ante lectus ante curabitur. Ac quis neque amet vel. Sed libero ut sed nisl non donec augue in molestie ut id sed aptent primis. Ligula dui tortor hac tempus cubilia, sapien morbi duis sed. Molestie ac faucibus ultrices. Scelerisque non ut sapien, proin sit odio duis ut aliquam suscipit in duis platea. Phasellus tellus volutpat sed vitae augue a. Ac sit, sociis eget vel sociis. Mus sit in sit erat, turpis, consequat. Mauris, ligula lobortis ac arcu, in magna, nibh pharetra phasellus nascetur. Ligula odio sapien ac eu laoreet rhoncus non netus. Tellus, sagittis dictum lacus vitae tristique. 4.2.2 Project Template (for analyses) Lorem ipsum dolor sit amet, in, et sed facilisi maximus suspendisse, facilisi in. Finibus in posuere risus, luctus, elit lacus in, rhoncus, ante mollis. In, eu in est curabitur. Sit ante lectus ante curabitur. Ac quis neque amet vel. Sed libero ut sed nisl non donec augue in molestie ut id sed aptent primis. Ligula dui tortor hac tempus cubilia, sapien morbi duis sed. Molestie ac faucibus ultrices. Scelerisque non ut sapien, proin sit odio duis ut aliquam suscipit in duis platea. Phasellus tellus volutpat sed vitae augue a. Ac sit, sociis eget vel sociis. Mus sit in sit erat, turpis, consequat. Mauris, ligula lobortis ac arcu, in magna, nibh pharetra phasellus nascetur. Ligula odio sapien ac eu laoreet rhoncus non netus. Tellus, sagittis dictum lacus vitae tristique. 4.2.3 Project publication Lorem ipsum dolor sit amet, in, et sed facilisi maximus suspendisse, facilisi in. Finibus in posuere risus, luctus, elit lacus in, rhoncus, ante mollis. In, eu in est curabitur. Sit ante lectus ante curabitur. Ac quis neque amet vel. Sed libero ut sed nisl non donec augue in molestie ut id sed aptent primis. Ligula dui tortor hac tempus cubilia, sapien morbi duis sed. Molestie ac faucibus ultrices. Scelerisque non ut sapien, proin sit odio duis ut aliquam suscipit in duis platea. Phasellus tellus volutpat sed vitae augue a. Ac sit, sociis eget vel sociis. Mus sit in sit erat, turpis, consequat. Mauris, ligula lobortis ac arcu, in magna, nibh pharetra phasellus nascetur. Ligula odio sapien ac eu laoreet rhoncus non netus. Tellus, sagittis dictum lacus vitae tristique. 4.3 Project lists Lorem ipsum dolor sit amet, in, et sed facilisi maximus suspendisse, facilisi in. Finibus in posuere risus, luctus, elit lacus in, rhoncus, ante mollis. In, eu in est curabitur. Sit ante lectus ante curabitur. Ac quis neque amet vel. Sed libero ut sed nisl non donec augue in molestie ut id sed aptent primis. Ligula dui tortor hac tempus cubilia, sapien morbi duis sed. Molestie ac faucibus ultrices. Scelerisque non ut sapien, proin sit odio duis ut aliquam suscipit in duis platea. Phasellus tellus volutpat sed vitae augue a. Ac sit, sociis eget vel sociis. Mus sit in sit erat, turpis, consequat. Mauris, ligula lobortis ac arcu, in magna, nibh pharetra phasellus nascetur. Ligula odio sapien ac eu laoreet rhoncus non netus. Tellus, sagittis dictum lacus vitae tristique. 4.3.1 Recurring Projects Lorem ipsum dolor sit amet, in, et sed facilisi maximus suspendisse, facilisi in. Finibus in posuere risus, luctus, elit lacus in, rhoncus, ante mollis. In, eu in est curabitur. Sit ante lectus ante curabitur. Ac quis neque amet vel. Sed libero ut sed nisl non donec augue in molestie ut id sed aptent primis. Ligula dui tortor hac tempus cubilia, sapien morbi duis sed. Molestie ac faucibus ultrices. Scelerisque non ut sapien, proin sit odio duis ut aliquam suscipit in duis platea. Phasellus tellus volutpat sed vitae augue a. Ac sit, sociis eget vel sociis. Mus sit in sit erat, turpis, consequat. Mauris, ligula lobortis ac arcu, in magna, nibh pharetra phasellus nascetur. Ligula odio sapien ac eu laoreet rhoncus non netus. Tellus, sagittis dictum lacus vitae tristique. 4.3.2 Special (i.e., Ad-hoc) Projects Lorem ipsum dolor sit amet, in, et sed facilisi maximus suspendisse, facilisi in. Finibus in posuere risus, luctus, elit lacus in, rhoncus, ante mollis. In, eu in est curabitur. Sit ante lectus ante curabitur. Ac quis neque amet vel. Sed libero ut sed nisl non donec augue in molestie ut id sed aptent primis. Ligula dui tortor hac tempus cubilia, sapien morbi duis sed. Molestie ac faucibus ultrices. Scelerisque non ut sapien, proin sit odio duis ut aliquam suscipit in duis platea. Phasellus tellus volutpat sed vitae augue a. Ac sit, sociis eget vel sociis. Mus sit in sit erat, turpis, consequat. Mauris, ligula lobortis ac arcu, in magna, nibh pharetra phasellus nascetur. Ligula odio sapien ac eu laoreet rhoncus non netus. Tellus, sagittis dictum lacus vitae tristique. "],["coding-standards.html", "Chapter 5 Coding Standards", " Chapter 5 Coding Standards Lorem ipsum dolor sit amet, in, et sed facilisi maximus suspendisse, facilisi in. Finibus in posuere risus, luctus, elit lacus in, rhoncus, ante mollis. In, eu in est curabitur. Sit ante lectus ante curabitur. Ac quis neque amet vel. Sed libero ut sed nisl non donec augue in molestie ut id sed aptent primis. Ligula dui tortor hac tempus cubilia, sapien morbi duis sed. Molestie ac faucibus ultrices. Scelerisque non ut sapien, proin sit odio duis ut aliquam suscipit in duis platea. Phasellus tellus volutpat sed vitae augue a. Ac sit, sociis eget vel sociis. Mus sit in sit erat, turpis, consequat. Mauris, ligula lobortis ac arcu, in magna, nibh pharetra phasellus nascetur. Ligula odio sapien ac eu laoreet rhoncus non netus. Tellus, sagittis dictum lacus vitae tristique. "],["visualization-standards.html", "Chapter 6 Visualization Standards", " Chapter 6 Visualization Standards "],["measures.html", "Chapter 7 Measures 7.1 The Students Table 7.2 Student Persistence 7.3 College Application &amp; Matriculation Metrics 7.4 Critical Student Intervention (CSI) Identification", " Chapter 7 Measures 7.1 The Students Table The Students table is probably the most important table of all. It contains historical student personal data since IDEA’s inception. We use this table to know to what subpopulation a student belongs to. Also, we can link this table to other student data using the [StudentNumber] field. Table: [1065574-SQLPRD1].[PROD1].[Schools].[Students] Main fields: [AcademicYear] [StudentNumber] | [SchoolNumber] | [GradeLevelID] | [EnrollmentStatus] | [Gender] | [SPED] | [ELLCode] | [PrimaryDisabilityCode ] | [SecondaryDisabilityCode ] | [TertiaryDisabilityCode ] | [EconomicDisadvantageCode] | [FederalHispanicFlag] | [FederaRaceI] | [FederaRaceA] | [FederaRaceB] | [FederaRaceP] | [FederaRaceW] |[EntryDate] | [ExitDate] | [RowIsCurrent] Who is what?: [EnrollmentStatus]: If EnrollmentStatus = 0, it means that the student is/was an active student for the corresponding academic year, If EnrollmentStatus = 2, it means the student left the district before completing the academic year, If EnrollmentStatus = 3, it means the student graduated from IDEA’s high school. [ELLCode]: English Language Learner (ELL) A.K.A. Limited English Proficiency (LEP) If ELLCode = 0, student is not identified as an ELL student, If ELLCode = 1, the student is identified as an ELL student, If ELLCode not in (0,1), it means the student is not currently identified as an ELL but was identified before as one. [SPED]: SPED students are composed of RISE and Life Skills students, not including Critical Student Intervention (CSI) students. If SPED = 0, it means the student is not identified as a SPED student, otherwise then SPED = 1. [DisabilityCode] DisabilityCode Description 0 No disability 1 Orthopedic impairment 2 Other health impairment 3 Auditory impairment 4 Visual impairment 5 Deaf-Blind 6 Intellectual Disability 7 Emotional disturbance 8 Learning disability 9 Speech impairment 10 Autism 13 Traumatic brain injury 14 Noncategorical early childhood SELECT DISTINCT [StudentNumber], [PrimaryDisabilityCode] AS [DisabilityCode], [PrimaryDisabilityDescription] AS [DisabilityDescription] FROM ( SELECT DISTINCT [StudentNumber],[PrimaryDisabilityCode], [PrimaryDisabilityDescription] FROM [PROD1].[Schools].[Students] WHERE AcademicYear=&#39;2018-2019&#39; UNION ALL SELECT DISTINCT [StudentNumber], [SecondaryDisabilityCode], [SecondaryDisabilityDescription] FROM [PROD1].[Schools].[Students] WHERE AcademicYear=&#39;2018-2019&#39; UNION ALL SELECT DISTINCT [StudentNumber], [TertiaryDisabilityCode], [TertiaryDisabilityDescription] FROM [PROD1].[Schools].[Students] WHERE AcademicYear=&#39;2018-2019&#39;) A WHERE [PrimaryDisabilityDescription] &lt;&gt; &#39;&#39; ORDER BY StudentNumber [EconomicDisadvantageCode]: A.K.A ECD If EconomicDisadvantageCode = 0, then the student is not identified as economically disadvantaged, otherwise the student is identified as economically disadvantaged, If EconomicDisadvantageCode = 1, then the student is identified as an economically disadvantaged and eligible for free meals, If EconomicDisadvantageCode = 2, the student is also identified as an economically disadvantaged but only eligible for reduced-price meals, If EconomicDisadvantageCode = 99, it means the student is identified as an economically disadvantaged one but has another economic disadvantage. Race / Ethnicity: Same like in TX . [RowIsCurrent]: Context: Who Counts? Who is a 4year 2year? Persistence Rate by: District: use all data Region: use the [RegionDescription] field School: [SchoolShortName] + [SchoolType] Grade Level: [GradeLevelID] Student Type (new or returning): use [NewStudent] = 1 to identify new students, if zero then the student is considered as a returning student. Other Useful Fields: Use [PersistenceCode] or [PersistenceCategory] to know student and family reasons on why a student left the district. [LeaverWeek] to know the week when the student left the district. SQL Code Example: SELECT 1 - AVG(CAST([FDOPLEAVER] AS NUMERIC)) FROM [`1065574-SQLPRD1`].[Persistence].[dbo].[PersistenceCode] WHERE [FDOPCOUNTP] = 1 Within this chapter we will find the measures IDEA Public Schools stakeholders talk are the most interested about. 7.2 Student Persistence Student Persistence is one of the most important measures. Chiefs, VPs, and School Leaders are always monitoring this metric which gives us a good idea of our efforts to provide high quality service to our students and their families. We say a student persisted if the student was enrolled and attended the school on the “First Day Of Persistence (FDOP)” for two consecutive years. Example: John enrolled IDEA Public Schools on August 19, 2019 and attended to the school the FDOP which is the Monday after the official first week of school. John completes the 2019-2020 academic year and by August 17, 2020 (FDOP) John enrolls again and attends to the school. If John was enrolled but did not attend on the FDOP and he decides to come back until September, then John won’t count as a student who persisted. Database: [1065574-SQLPRD1].[Persistence] Main metrics: District, Regional, School, Subpopulation, Grade Level General Formula: 1 – (Leavers/All Students) Tables: [dbo].[PersistenceCode]: This table is used to calculate persistence rate for the current academic year. It shows data for the most recent week. We will see different week numbers, but this is because the first day of school is different across the district. [dbo].[PersistenceCodeHistorical]: This table shows the final persistence data (as of last week of persistence). Here we will find historical data starting from 2019-2020. The table will be updated every year. [dbo].[PersistenceHistorical]: As the previous table, this one contains final persistence data. The table will not be updated but it includes 2018-2019 data. Context: Who Counts? To calculate persistence, we need to first filter [FDOPCOUNTP] = 1 (FDOP First Day Of Persistence). The number of students resulting from this operation would be our denominator. Who is a Leaver? If FDOPLEAVER equals 1, then that student is considered as a leaver otherwise is a current student. All summer leavers (June – August) from [SummerLeaver] = 1, are marked as FDOPLEAVER = 1. All leavers should have an [EnrollmentStatus] =2. The number of students resulting from this operation would be our numerator. Persistence Rate by: District: use all data Region: use the [RegionDescription] field School: [SchoolShortName] + [SchoolType] Grade Level: [GradeLevelID] Student Type (new or returning): use [NewStudent] = 1 to identify new students, if zero then the student is considered as a returning student. Other Useful Fields: Use [PersistenceCode] or [PersistenceCategory] to know student and family reasons on why a student left the district. [LeaverWeek] to know the week when the student left the district. SQL Code Example: SELECT 1 - AVG(CAST([FDOPLEAVER] AS NUMERIC)) FROM [`1065574-SQLPRD1`].[Persistence].[dbo].[PersistenceCode] WHERE [FDOPCOUNTP] = 1 7.3 College Application &amp; Matriculation Metrics To close the opportunity gap, IDEA Public Schools is committed to a vision of College for All Children. The College Success Team (CST) lead the initiative of monitoring and identifying the best College/University for each senior student, this is possible with data dashboards that use Naviance information. Database: [1065574-SQLPRD1].[PROD1].[Colleges] Main metrics: Percent at least 1 application, Percent at least 1 submission, Percent at least 1 acceptance Most important columns: [Stage] | [ResultCode] Tables: [Colleges]: Here we will find all colleges/universities. What makes this table important is the [CEEB] field which is an ID that can help us connect distinct college related data sources like Naviance with National Student Clearinghouse data! [CollegeTuition]: Besides having in-state tuition and out-of-state tuition data, we can also find two other unique codes ([OPEID] and [ACTCode]), that will aid us to college data across different data sources. [EDocs]: Details about application submitted e-documents. [StudentCollegeApplication]: This is the main table. We use it to calculate most of the metrics the College Application &amp; Matriculation dashboard has. We can find data from 2018 up to the current academic year. [StudentCollegeApplicationsSummary]: [StudentScholarships]: Context: Who Counts? Who is a 4year 2year? Persistence Rate by: District: use all data Region: use the [RegionDescription] field School: [SchoolShortName] + [SchoolType] Grade Level: [GradeLevelID] Student Type (new or returning): use [NewStudent] = 1 to identify new students, if zero then the student is considered as a returning student. Other Useful Fields: Use [PersistenceCode] or [PersistenceCategory] to know student and family reasons on why a student left the district. [LeaverWeek] to know the week when the student left the district. SQL Code Example: SELECT 1 - AVG(CAST([FDOPLEAVER] AS NUMERIC)) FROM [`1065574-SQLPRD1`].[Persistence].[dbo].[PersistenceCode] WHERE [FDOPCOUNTP] = 1 7.4 Critical Student Intervention (CSI) Identification To address the achievement gap among students, Dolores Gonzalez, our Chief Program Office introduced the Critical Student Intervention (CSI) program in 2014. Currently, along with her team, Tricia Lopez our VP of Special Programs lead IDEA Public Schools in the effort of reducing the performance gaps. To help Tricia’s team, the Software Development team put together a table where we can find the students who are enrolled in a CSI math and/or reading intervention program. Database: [1065574-SQLPRD1].[PROD1].[Schools] Main metrics: Percent of CSI students by school Most important columns: [ProgramID] | [InterventionType] Tables: [StudentCSI]: This table will aid us to identify the students who are/were enrolled in math or reading CSI intervention programs. Since sometimes there is need of data adjustments from one year to another, the [ProgramID] number might change. However, this should not be a problem because we can always use the [InterventionType] field to correctly associate an intervention program to either math or reading. SQL Code Example: SELECT DISTINCT AcademicYear, [Subject], ProgramID FROM (SELECT [AcademicYear] ,[ProgramID] ,CASE WHEN [InterventionType] LIKE &#39;%math%&#39; THEN &#39;Math&#39; WHEN [InterventionType] LIKE &#39;%reading%&#39; THEN &#39;Reading&#39; ELSE NULL END AS [Subject] FROM [1065574-SQLPRD1].[PROD1].[Schools].[StudentCSI] WHERE [AcademicYear] = &#39;2018-2019&#39; AND (InterventionType LIKE &#39;%math%&#39; OR InterventionType LIKE &#39;%reading%&#39;)) AS A GROUP BY AcademicYear, [Subject], ProgramID [StudentCSIDetails]: Here we find detailed information about the students who are or were part of a CSI program. We can either use this table to get a student count per school, or we could match the [StudentCSI] table data to the Students table and get the percent of CSI students per school. SQL Code Example: SELECT A.StudentNumber, A.SchoolNumber, B.SchoolName, D.[Subject] FROM [1065574-SQLPRD1].[PROD1].[Schools].[Students] AS A INNER JOIN [1065574-SQLPRD1].[PROD1].[Schools].[Schools] AS B ON A.SchoolNumber = B.SchoolNumber LEFT JOIN [1065574-SQLPRD1].[PROD1].[Schools].[StudentCSI] AS C ON A.StudentNumber = C.StudentNumber AND A.AcademicYear = C.AcademicYear LEFT JOIN (SELECT DISTINCT AcademicYear, [Subject], ProgramID FROM (SELECT [AcademicYear] ,[ProgramID] ,CASE WHEN [InterventionType] LIKE &#39;%math%&#39; THEN &#39;Math&#39; WHEN [InterventionType] LIKE &#39;%reading%&#39; THEN &#39;Reading&#39; ELSE NULL END AS [Subject] FROM [1065574-SQLPRD1].[PROD1].[Schools].[StudentCSI] WHERE [AcademicYear] = &#39;2020-2021&#39; AND (InterventionType LIKE &#39;%math%&#39; OR InterventionType LIKE &#39;%reading%&#39;)) AS A GROUP BY AcademicYear, [Subject], ProgramID) AS D ON C.ProgramID = D.ProgramID WHERE A.AcademicYear = &#39;2020-2021&#39; "],["models-and-methods.html", "Chapter 8 Models and Methods", " Chapter 8 Models and Methods Lorem ipsum dolor sit amet, in, et sed facilisi maximus suspendisse, facilisi in. Finibus in posuere risus, luctus, elit lacus in, rhoncus, ante mollis. In, eu in est curabitur. Sit ante lectus ante curabitur. Ac quis neque amet vel. Sed libero ut sed nisl non donec augue in molestie ut id sed aptent primis. Ligula dui tortor hac tempus cubilia, sapien morbi duis sed. Molestie ac faucibus ultrices. Scelerisque non ut sapien, proin sit odio duis ut aliquam suscipit in duis platea. Phasellus tellus volutpat sed vitae augue a. Ac sit, sociis eget vel sociis. Mus sit in sit erat, turpis, consequat. Mauris, ligula lobortis ac arcu, in magna, nibh pharetra phasellus nascetur. Ligula odio sapien ac eu laoreet rhoncus non netus. Tellus, sagittis dictum lacus vitae tristique. "],["tips-and-tricks.html", "Chapter 9 Tips and Tricks", " Chapter 9 Tips and Tricks Lorem ipsum dolor sit amet, in, et sed facilisi maximus suspendisse, facilisi in. Finibus in posuere risus, luctus, elit lacus in, rhoncus, ante mollis. In, eu in est curabitur. Sit ante lectus ante curabitur. Ac quis neque amet vel. Sed libero ut sed nisl non donec augue in molestie ut id sed aptent primis. Ligula dui tortor hac tempus cubilia, sapien morbi duis sed. Molestie ac faucibus ultrices. Scelerisque non ut sapien, proin sit odio duis ut aliquam suscipit in duis platea. Phasellus tellus volutpat sed vitae augue a. Ac sit, sociis eget vel sociis. Mus sit in sit erat, turpis, consequat. Mauris, ligula lobortis ac arcu, in magna, nibh pharetra phasellus nascetur. Ligula odio sapien ac eu laoreet rhoncus non netus. Tellus, sagittis dictum lacus vitae tristique. "],["references.html", "References", " References "]]
